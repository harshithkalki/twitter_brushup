// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")

    // If you have enabled foreign key constraints for your database, remove this line.
    relationMode = "prisma"
}

model Tweet {
    id        String   @id @default(uuid())
    userid    String
    content   String
    createdAt DateTime @default(now())

    likes Like[]

    user User @relation(fields: [userid], references: [id], onDelete: Cascade)

    @@index([userid])
}

model Like {
    tweetId String
    userId  String

    tweet Tweet @relation(fields: [tweetId], references: [id])
    user  User  @relation(fields: [userId], references: [id])

    @@id([tweetId, userId])
    @@index([userId])
    @@index([tweetId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    createdAt     DateTime  @default(now())
    image         String?
    accounts      Account[]
    sessions      Session[]
    tweets        Tweet[]
    like          Like[]
    followers     User[]    @relation(name: "following")
    follows       User[]    @relation(name: "following")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
